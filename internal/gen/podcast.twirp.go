// Code generated by protoc-gen-twirp v8.1.1, DO NOT EDIT.
// source: podcast.proto

package protos

import context "context"
import fmt "fmt"
import http "net/http"
import ioutil "io/ioutil"
import json "encoding/json"
import strconv "strconv"
import strings "strings"

import protojson "google.golang.org/protobuf/encoding/protojson"
import proto "google.golang.org/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// Version compatibility assertion.
// If the constant is not defined in the package, that likely means
// the package needs to be updated to work with this generated code.
// See https://twitchtv.github.io/twirp/docs/version_matrix.html
const _ = twirp.TwirpPackageMinVersion_8_1_0

// =============
// Pod Interface
// =============

type Pod interface {
	// Podcast and Episodes
	GetPodcast(context.Context, *GetPodReq) (*Podcast, error)

	GetEpisodes(context.Context, *GetEpiReq) (*Episodes, error)

	// UserEpisode
	GetUserEpisode(context.Context, *GetUserEpiReq) (*UserEpisode, error)

	UpsertUserEpisode(context.Context, *UserEpisode) (*Response, error)

	// Subscriptions
	GetSubscriptions(context.Context, *GetSubReq) (*Subscriptions, error)

	// Misc.
	GetUserLastPlayed(context.Context, *GetUserLastPlayedReq) (*LastPlayedRes, error)
}

// ===================
// Pod Protobuf Client
// ===================

type podProtobufClient struct {
	client      HTTPClient
	urls        [6]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewPodProtobufClient creates a Protobuf client that implements the Pod interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewPodProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) Pod {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "protos", "Pod")
	urls := [6]string{
		serviceURL + "GetPodcast",
		serviceURL + "GetEpisodes",
		serviceURL + "GetUserEpisode",
		serviceURL + "UpsertUserEpisode",
		serviceURL + "GetSubscriptions",
		serviceURL + "GetUserLastPlayed",
	}

	return &podProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *podProtobufClient) GetPodcast(ctx context.Context, in *GetPodReq) (*Podcast, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protos")
	ctx = ctxsetters.WithServiceName(ctx, "Pod")
	ctx = ctxsetters.WithMethodName(ctx, "GetPodcast")
	caller := c.callGetPodcast
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetPodReq) (*Podcast, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetPodReq)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetPodReq) when calling interceptor")
					}
					return c.callGetPodcast(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Podcast)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Podcast) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *podProtobufClient) callGetPodcast(ctx context.Context, in *GetPodReq) (*Podcast, error) {
	out := new(Podcast)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *podProtobufClient) GetEpisodes(ctx context.Context, in *GetEpiReq) (*Episodes, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protos")
	ctx = ctxsetters.WithServiceName(ctx, "Pod")
	ctx = ctxsetters.WithMethodName(ctx, "GetEpisodes")
	caller := c.callGetEpisodes
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetEpiReq) (*Episodes, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetEpiReq)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetEpiReq) when calling interceptor")
					}
					return c.callGetEpisodes(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Episodes)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Episodes) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *podProtobufClient) callGetEpisodes(ctx context.Context, in *GetEpiReq) (*Episodes, error) {
	out := new(Episodes)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *podProtobufClient) GetUserEpisode(ctx context.Context, in *GetUserEpiReq) (*UserEpisode, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protos")
	ctx = ctxsetters.WithServiceName(ctx, "Pod")
	ctx = ctxsetters.WithMethodName(ctx, "GetUserEpisode")
	caller := c.callGetUserEpisode
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetUserEpiReq) (*UserEpisode, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetUserEpiReq)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetUserEpiReq) when calling interceptor")
					}
					return c.callGetUserEpisode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserEpisode)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserEpisode) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *podProtobufClient) callGetUserEpisode(ctx context.Context, in *GetUserEpiReq) (*UserEpisode, error) {
	out := new(UserEpisode)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *podProtobufClient) UpsertUserEpisode(ctx context.Context, in *UserEpisode) (*Response, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protos")
	ctx = ctxsetters.WithServiceName(ctx, "Pod")
	ctx = ctxsetters.WithMethodName(ctx, "UpsertUserEpisode")
	caller := c.callUpsertUserEpisode
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserEpisode) (*Response, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserEpisode)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserEpisode) when calling interceptor")
					}
					return c.callUpsertUserEpisode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Response)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Response) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *podProtobufClient) callUpsertUserEpisode(ctx context.Context, in *UserEpisode) (*Response, error) {
	out := new(Response)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *podProtobufClient) GetSubscriptions(ctx context.Context, in *GetSubReq) (*Subscriptions, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protos")
	ctx = ctxsetters.WithServiceName(ctx, "Pod")
	ctx = ctxsetters.WithMethodName(ctx, "GetSubscriptions")
	caller := c.callGetSubscriptions
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetSubReq) (*Subscriptions, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetSubReq)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetSubReq) when calling interceptor")
					}
					return c.callGetSubscriptions(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Subscriptions)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Subscriptions) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *podProtobufClient) callGetSubscriptions(ctx context.Context, in *GetSubReq) (*Subscriptions, error) {
	out := new(Subscriptions)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *podProtobufClient) GetUserLastPlayed(ctx context.Context, in *GetUserLastPlayedReq) (*LastPlayedRes, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protos")
	ctx = ctxsetters.WithServiceName(ctx, "Pod")
	ctx = ctxsetters.WithMethodName(ctx, "GetUserLastPlayed")
	caller := c.callGetUserLastPlayed
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetUserLastPlayedReq) (*LastPlayedRes, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetUserLastPlayedReq)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetUserLastPlayedReq) when calling interceptor")
					}
					return c.callGetUserLastPlayed(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*LastPlayedRes)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*LastPlayedRes) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *podProtobufClient) callGetUserLastPlayed(ctx context.Context, in *GetUserLastPlayedReq) (*LastPlayedRes, error) {
	out := new(LastPlayedRes)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ===============
// Pod JSON Client
// ===============

type podJSONClient struct {
	client      HTTPClient
	urls        [6]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewPodJSONClient creates a JSON client that implements the Pod interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewPodJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) Pod {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "protos", "Pod")
	urls := [6]string{
		serviceURL + "GetPodcast",
		serviceURL + "GetEpisodes",
		serviceURL + "GetUserEpisode",
		serviceURL + "UpsertUserEpisode",
		serviceURL + "GetSubscriptions",
		serviceURL + "GetUserLastPlayed",
	}

	return &podJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *podJSONClient) GetPodcast(ctx context.Context, in *GetPodReq) (*Podcast, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protos")
	ctx = ctxsetters.WithServiceName(ctx, "Pod")
	ctx = ctxsetters.WithMethodName(ctx, "GetPodcast")
	caller := c.callGetPodcast
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetPodReq) (*Podcast, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetPodReq)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetPodReq) when calling interceptor")
					}
					return c.callGetPodcast(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Podcast)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Podcast) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *podJSONClient) callGetPodcast(ctx context.Context, in *GetPodReq) (*Podcast, error) {
	out := new(Podcast)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *podJSONClient) GetEpisodes(ctx context.Context, in *GetEpiReq) (*Episodes, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protos")
	ctx = ctxsetters.WithServiceName(ctx, "Pod")
	ctx = ctxsetters.WithMethodName(ctx, "GetEpisodes")
	caller := c.callGetEpisodes
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetEpiReq) (*Episodes, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetEpiReq)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetEpiReq) when calling interceptor")
					}
					return c.callGetEpisodes(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Episodes)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Episodes) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *podJSONClient) callGetEpisodes(ctx context.Context, in *GetEpiReq) (*Episodes, error) {
	out := new(Episodes)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *podJSONClient) GetUserEpisode(ctx context.Context, in *GetUserEpiReq) (*UserEpisode, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protos")
	ctx = ctxsetters.WithServiceName(ctx, "Pod")
	ctx = ctxsetters.WithMethodName(ctx, "GetUserEpisode")
	caller := c.callGetUserEpisode
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetUserEpiReq) (*UserEpisode, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetUserEpiReq)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetUserEpiReq) when calling interceptor")
					}
					return c.callGetUserEpisode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserEpisode)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserEpisode) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *podJSONClient) callGetUserEpisode(ctx context.Context, in *GetUserEpiReq) (*UserEpisode, error) {
	out := new(UserEpisode)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *podJSONClient) UpsertUserEpisode(ctx context.Context, in *UserEpisode) (*Response, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protos")
	ctx = ctxsetters.WithServiceName(ctx, "Pod")
	ctx = ctxsetters.WithMethodName(ctx, "UpsertUserEpisode")
	caller := c.callUpsertUserEpisode
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserEpisode) (*Response, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserEpisode)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserEpisode) when calling interceptor")
					}
					return c.callUpsertUserEpisode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Response)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Response) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *podJSONClient) callUpsertUserEpisode(ctx context.Context, in *UserEpisode) (*Response, error) {
	out := new(Response)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *podJSONClient) GetSubscriptions(ctx context.Context, in *GetSubReq) (*Subscriptions, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protos")
	ctx = ctxsetters.WithServiceName(ctx, "Pod")
	ctx = ctxsetters.WithMethodName(ctx, "GetSubscriptions")
	caller := c.callGetSubscriptions
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetSubReq) (*Subscriptions, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetSubReq)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetSubReq) when calling interceptor")
					}
					return c.callGetSubscriptions(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Subscriptions)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Subscriptions) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *podJSONClient) callGetSubscriptions(ctx context.Context, in *GetSubReq) (*Subscriptions, error) {
	out := new(Subscriptions)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *podJSONClient) GetUserLastPlayed(ctx context.Context, in *GetUserLastPlayedReq) (*LastPlayedRes, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protos")
	ctx = ctxsetters.WithServiceName(ctx, "Pod")
	ctx = ctxsetters.WithMethodName(ctx, "GetUserLastPlayed")
	caller := c.callGetUserLastPlayed
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetUserLastPlayedReq) (*LastPlayedRes, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetUserLastPlayedReq)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetUserLastPlayedReq) when calling interceptor")
					}
					return c.callGetUserLastPlayed(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*LastPlayedRes)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*LastPlayedRes) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *podJSONClient) callGetUserLastPlayed(ctx context.Context, in *GetUserLastPlayedReq) (*LastPlayedRes, error) {
	out := new(LastPlayedRes)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ==================
// Pod Server Handler
// ==================

type podServer struct {
	Pod
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
	jsonCamelCase    bool   // JSON fields are serialized as lowerCamelCase rather than keeping the original proto names
}

// NewPodServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewPodServer(svc Pod, opts ...interface{}) TwirpServer {
	serverOpts := newServerOpts(opts)

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	jsonSkipDefaults := false
	_ = serverOpts.ReadOpt("jsonSkipDefaults", &jsonSkipDefaults)
	jsonCamelCase := false
	_ = serverOpts.ReadOpt("jsonCamelCase", &jsonCamelCase)
	var pathPrefix string
	if ok := serverOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	return &podServer{
		Pod:              svc,
		hooks:            serverOpts.Hooks,
		interceptor:      twirp.ChainInterceptors(serverOpts.Interceptors...),
		pathPrefix:       pathPrefix,
		jsonSkipDefaults: jsonSkipDefaults,
		jsonCamelCase:    jsonCamelCase,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *podServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *podServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// PodPathPrefix is a convenience constant that may identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// with the default "/twirp" prefix and default CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const PodPathPrefix = "/twirp/protos.Pod/"

func (s *podServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "protos")
	ctx = ctxsetters.WithServiceName(ctx, "Pod")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "protos.Pod" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "GetPodcast":
		s.serveGetPodcast(ctx, resp, req)
		return
	case "GetEpisodes":
		s.serveGetEpisodes(ctx, resp, req)
		return
	case "GetUserEpisode":
		s.serveGetUserEpisode(ctx, resp, req)
		return
	case "UpsertUserEpisode":
		s.serveUpsertUserEpisode(ctx, resp, req)
		return
	case "GetSubscriptions":
		s.serveGetSubscriptions(ctx, resp, req)
		return
	case "GetUserLastPlayed":
		s.serveGetUserLastPlayed(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *podServer) serveGetPodcast(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetPodcastJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetPodcastProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *podServer) serveGetPodcastJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetPodcast")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetPodReq)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Pod.GetPodcast
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetPodReq) (*Podcast, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetPodReq)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetPodReq) when calling interceptor")
					}
					return s.Pod.GetPodcast(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Podcast)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Podcast) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *Podcast
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Podcast and nil error while calling GetPodcast. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *podServer) serveGetPodcastProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetPodcast")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetPodReq)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Pod.GetPodcast
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetPodReq) (*Podcast, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetPodReq)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetPodReq) when calling interceptor")
					}
					return s.Pod.GetPodcast(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Podcast)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Podcast) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *Podcast
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Podcast and nil error while calling GetPodcast. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *podServer) serveGetEpisodes(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetEpisodesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetEpisodesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *podServer) serveGetEpisodesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetEpisodes")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetEpiReq)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Pod.GetEpisodes
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetEpiReq) (*Episodes, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetEpiReq)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetEpiReq) when calling interceptor")
					}
					return s.Pod.GetEpisodes(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Episodes)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Episodes) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *Episodes
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Episodes and nil error while calling GetEpisodes. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *podServer) serveGetEpisodesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetEpisodes")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetEpiReq)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Pod.GetEpisodes
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetEpiReq) (*Episodes, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetEpiReq)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetEpiReq) when calling interceptor")
					}
					return s.Pod.GetEpisodes(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Episodes)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Episodes) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *Episodes
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Episodes and nil error while calling GetEpisodes. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *podServer) serveGetUserEpisode(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetUserEpisodeJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetUserEpisodeProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *podServer) serveGetUserEpisodeJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetUserEpisode")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetUserEpiReq)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Pod.GetUserEpisode
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetUserEpiReq) (*UserEpisode, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetUserEpiReq)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetUserEpiReq) when calling interceptor")
					}
					return s.Pod.GetUserEpisode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserEpisode)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserEpisode) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserEpisode
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserEpisode and nil error while calling GetUserEpisode. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *podServer) serveGetUserEpisodeProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetUserEpisode")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetUserEpiReq)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Pod.GetUserEpisode
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetUserEpiReq) (*UserEpisode, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetUserEpiReq)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetUserEpiReq) when calling interceptor")
					}
					return s.Pod.GetUserEpisode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserEpisode)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserEpisode) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserEpisode
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserEpisode and nil error while calling GetUserEpisode. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *podServer) serveUpsertUserEpisode(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpsertUserEpisodeJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpsertUserEpisodeProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *podServer) serveUpsertUserEpisodeJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpsertUserEpisode")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UserEpisode)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Pod.UpsertUserEpisode
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserEpisode) (*Response, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserEpisode)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserEpisode) when calling interceptor")
					}
					return s.Pod.UpsertUserEpisode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Response)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Response) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *Response
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Response and nil error while calling UpsertUserEpisode. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *podServer) serveUpsertUserEpisodeProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpsertUserEpisode")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UserEpisode)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Pod.UpsertUserEpisode
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserEpisode) (*Response, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserEpisode)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserEpisode) when calling interceptor")
					}
					return s.Pod.UpsertUserEpisode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Response)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Response) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *Response
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Response and nil error while calling UpsertUserEpisode. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *podServer) serveGetSubscriptions(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetSubscriptionsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetSubscriptionsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *podServer) serveGetSubscriptionsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetSubscriptions")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetSubReq)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Pod.GetSubscriptions
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetSubReq) (*Subscriptions, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetSubReq)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetSubReq) when calling interceptor")
					}
					return s.Pod.GetSubscriptions(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Subscriptions)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Subscriptions) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *Subscriptions
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Subscriptions and nil error while calling GetSubscriptions. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *podServer) serveGetSubscriptionsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetSubscriptions")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetSubReq)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Pod.GetSubscriptions
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetSubReq) (*Subscriptions, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetSubReq)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetSubReq) when calling interceptor")
					}
					return s.Pod.GetSubscriptions(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Subscriptions)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Subscriptions) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *Subscriptions
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Subscriptions and nil error while calling GetSubscriptions. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *podServer) serveGetUserLastPlayed(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetUserLastPlayedJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetUserLastPlayedProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *podServer) serveGetUserLastPlayedJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetUserLastPlayed")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetUserLastPlayedReq)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Pod.GetUserLastPlayed
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetUserLastPlayedReq) (*LastPlayedRes, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetUserLastPlayedReq)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetUserLastPlayedReq) when calling interceptor")
					}
					return s.Pod.GetUserLastPlayed(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*LastPlayedRes)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*LastPlayedRes) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *LastPlayedRes
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *LastPlayedRes and nil error while calling GetUserLastPlayed. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *podServer) serveGetUserLastPlayedProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetUserLastPlayed")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetUserLastPlayedReq)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Pod.GetUserLastPlayed
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetUserLastPlayedReq) (*LastPlayedRes, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetUserLastPlayedReq)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetUserLastPlayedReq) when calling interceptor")
					}
					return s.Pod.GetUserLastPlayed(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*LastPlayedRes)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*LastPlayedRes) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *LastPlayedRes
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *LastPlayedRes and nil error while calling GetUserLastPlayed. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *podServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor2, 0
}

func (s *podServer) ProtocGenTwirpVersion() string {
	return "v8.1.1"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *podServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "protos", "Pod")
}

var twirpFileDescriptor2 = []byte{
	// 875 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0x5d, 0x6f, 0xe3, 0x44,
	0x14, 0x6d, 0xe2, 0x26, 0x71, 0xae, 0x71, 0x37, 0x1d, 0xba, 0xd1, 0x28, 0x54, 0xc2, 0x32, 0x02,
	0x05, 0x81, 0x52, 0x29, 0xbb, 0x12, 0x12, 0xa0, 0x15, 0xda, 0xed, 0x6a, 0x55, 0xb6, 0x2b, 0x45,
	0xb3, 0xdb, 0x17, 0xde, 0x9c, 0x78, 0x08, 0x23, 0x9c, 0xd8, 0xf5, 0x1d, 0x8b, 0xcd, 0x03, 0x7f,
	0x8e, 0x9f, 0xc2, 0xbf, 0xe0, 0x0d, 0xcd, 0x57, 0x6c, 0xa7, 0x11, 0xe5, 0xa9, 0x73, 0xee, 0xd7,
	0xdc, 0x39, 0xe7, 0xd4, 0x0a, 0x84, 0x45, 0x9e, 0xae, 0x12, 0x94, 0xb3, 0xa2, 0xcc, 0x65, 0x4e,
	0xfa, 0xfa, 0x0f, 0x4e, 0x3e, 0x5f, 0xe7, 0xf9, 0x3a, 0xe3, 0x57, 0x1a, 0x2e, 0xab, 0x5f, 0xaf,
	0xa4, 0xd8, 0x70, 0x94, 0xc9, 0xa6, 0x30, 0x85, 0x13, 0xa8, 0x90, 0x97, 0xe6, 0x1c, 0x5f, 0x41,
	0xef, 0x66, 0x93, 0xac, 0x39, 0xb9, 0x80, 0x9e, 0x14, 0x32, 0xe3, 0xb4, 0x13, 0x75, 0xa6, 0x43,
	0x66, 0x00, 0x19, 0x81, 0x57, 0x95, 0x19, 0xed, 0xea, 0x98, 0x3a, 0xc6, 0xb7, 0xe0, 0xbf, 0x4a,
	0x24, 0x5f, 0xe7, 0xe5, 0x8e, 0x10, 0x38, 0x95, 0xfc, 0xa3, 0xb4, 0x2d, 0xfa, 0x4c, 0xbe, 0x05,
	0x7f, 0x65, 0xf3, 0xb4, 0x1b, 0x79, 0xd3, 0x60, 0x3e, 0x32, 0x57, 0xe1, 0xcc, 0xf5, 0xb1, 0x7d,
	0x45, 0xfc, 0x97, 0x07, 0x83, 0x85, 0x79, 0x05, 0x39, 0x83, 0xae, 0x48, 0xed, 0xac, 0xae, 0x48,
	0xeb, 0x8d, 0xba, 0xcd, 0x8d, 0xc6, 0xd0, 0x4f, 0x2a, 0xf9, 0x5b, 0x5e, 0x52, 0x4f, 0x87, 0x2d,
	0x22, 0x13, 0xf0, 0x79, 0x21, 0x30, 0x4f, 0xc5, 0x8a, 0x9e, 0x46, 0x9d, 0xa9, 0xcf, 0xf6, 0x98,
	0x50, 0x18, 0x60, 0xb5, 0xd9, 0x24, 0xe5, 0x8e, 0xf6, 0x74, 0x93, 0x83, 0xea, 0x05, 0x99, 0xd8,
	0xfe, 0x4e, 0xfb, 0xe6, 0x05, 0xea, 0x4c, 0xbe, 0x80, 0x9e, 0x50, 0x94, 0xd0, 0x41, 0xd4, 0x99,
	0x06, 0xf3, 0xd0, 0xad, 0xaf, 0x79, 0x62, 0x26, 0xa7, 0xaf, 0xfb, 0x58, 0x64, 0x62, 0x25, 0x24,
	0xf5, 0x75, 0xf3, 0x1e, 0xab, 0x5c, 0x96, 0x6c, 0xd7, 0x95, 0x9a, 0x31, 0x34, 0x39, 0x87, 0x55,
	0xee, 0x2d, 0xdf, 0xfd, 0x91, 0x97, 0x29, 0x52, 0x88, 0x3c, 0x95, 0x73, 0xb8, 0x45, 0x5d, 0xf0,
	0x18, 0x75, 0xe4, 0x39, 0x0c, 0x8a, 0x6a, 0x79, 0x9d, 0x48, 0x4e, 0x3f, 0xd1, 0x8b, 0x4e, 0x66,
	0x46, 0xf8, 0x99, 0x13, 0x7e, 0xf6, 0xc1, 0x09, 0xcf, 0x5c, 0x29, 0xf9, 0x09, 0xc2, 0x2c, 0x41,
	0xf9, 0xb2, 0x12, 0x59, 0xaa, 0x7b, 0xc3, 0x47, 0x7b, 0xdb, 0x0d, 0xca, 0x12, 0x25, 0x22, 0x3d,
	0x33, 0x96, 0x28, 0x11, 0xe3, 0xbf, 0x3d, 0x18, 0xbc, 0xd6, 0x5c, 0xf3, 0x07, 0x22, 0x5e, 0xc2,
	0xd0, 0xba, 0xf4, 0xe6, 0xda, 0x0a, 0x59, 0x07, 0x6a, 0x89, 0xbd, 0xe3, 0x12, 0x9f, 0xb6, 0x24,
	0x8e, 0x20, 0x30, 0x92, 0xf2, 0x0f, 0xbb, 0x82, 0x5b, 0x29, 0x9b, 0xa1, 0x5a, 0xba, 0xfe, 0x7f,
	0x48, 0xd7, 0x20, 0x6e, 0xf0, 0xff, 0x89, 0x8b, 0x20, 0x48, 0x39, 0xae, 0x4a, 0x51, 0x48, 0x91,
	0x6f, 0xad, 0xe6, 0xcd, 0x50, 0xd3, 0x65, 0xc3, 0xb6, 0xcb, 0xc6, 0xd0, 0x47, 0x9e, 0x60, 0xbe,
	0xa5, 0x10, 0x75, 0xa6, 0x3d, 0x66, 0x91, 0xea, 0xb0, 0xdb, 0xd3, 0x40, 0x27, 0x1c, 0x6c, 0xd9,
	0x2b, 0x3c, 0xb0, 0xd7, 0x18, 0xfa, 0xef, 0x16, 0xcf, 0xee, 0xd8, 0xad, 0xd5, 0xc0, 0x22, 0xf2,
	0x15, 0x9c, 0xa5, 0x55, 0x99, 0xa8, 0x5d, 0xde, 0x89, 0x2c, 0x13, 0x48, 0x9f, 0x44, 0x9d, 0xa9,
	0xc7, 0x0e, 0xa2, 0x6a, 0x36, 0x56, 0x4b, 0xc3, 0xfb, 0xc8, 0xcc, 0x76, 0x58, 0x6f, 0xb4, 0x5d,
	0xe5, 0x29, 0x4f, 0xe9, 0xb9, 0x79, 0x83, 0x85, 0xf1, 0x67, 0x30, 0x7c, 0xc3, 0xe5, 0x22, 0x4f,
	0x19, 0xbf, 0x3f, 0x54, 0x39, 0xde, 0xc0, 0x80, 0xf1, 0xfb, 0x8a, 0xa3, 0x7c, 0x44, 0xf0, 0x4b,
	0x18, 0xda, 0x27, 0xde, 0x5c, 0x5b, 0xd1, 0xeb, 0x80, 0xb2, 0x03, 0xca, 0xa4, 0x94, 0x5a, 0x77,
	0x8f, 0x19, 0xa0, 0x0c, 0xc7, 0xb7, 0xa9, 0x96, 0xdb, 0x63, 0xea, 0x18, 0xbf, 0xd2, 0xbb, 0xbc,
	0x2e, 0xc4, 0x91, 0x5d, 0xea, 0x21, 0xdd, 0x23, 0x43, 0xbc, 0x7a, 0xc8, 0x97, 0x10, 0xbe, 0xe1,
	0xf2, 0x0e, 0x79, 0x69, 0x07, 0x5d, 0x40, 0x8f, 0x17, 0xe2, 0xe6, 0xda, 0x7d, 0x01, 0x35, 0x88,
	0x03, 0x7d, 0xd7, 0xfb, 0x6a, 0xc9, 0xf8, 0x7d, 0x3c, 0x86, 0x0b, 0xdb, 0x73, 0x9b, 0xa0, 0x5c,
	0x64, 0xc9, 0x8e, 0x2b, 0x3e, 0xe2, 0x17, 0xe0, 0x33, 0x8e, 0x45, 0xbe, 0x45, 0x6e, 0x6c, 0xb0,
	0x5a, 0x71, 0x44, 0x3d, 0xc8, 0x67, 0x0e, 0xaa, 0xcc, 0x86, 0x23, 0x2a, 0x7f, 0x1a, 0x62, 0x1c,
	0x8c, 0xff, 0x84, 0xb0, 0x39, 0x10, 0xc9, 0xd7, 0x30, 0xb0, 0xa4, 0xe9, 0x21, 0xc1, 0xfc, 0x89,
	0xb3, 0xb2, 0xfd, 0x5a, 0x32, 0x97, 0x57, 0xa5, 0xce, 0x44, 0xdd, 0x76, 0xa9, 0xfd, 0x9f, 0xac,
	0x5d, 0x35, 0x86, 0xfe, 0xc6, 0x38, 0xc3, 0xf0, 0x60, 0x51, 0xfc, 0x16, 0xc2, 0xf7, 0xd5, 0x72,
	0xef, 0x64, 0x24, 0xdf, 0x43, 0x88, 0xcd, 0x00, 0xed, 0xe8, 0xcf, 0xd1, 0x85, 0x9b, 0xdc, 0xac,
	0x66, 0xed, 0xd2, 0xf8, 0x3b, 0xf0, 0xed, 0xc5, 0x48, 0xbe, 0x71, 0x1f, 0x65, 0xee, 0x46, 0x3c,
	0x58, 0x6e, 0x5f, 0x30, 0xff, 0xa7, 0x0b, 0xde, 0x22, 0x4f, 0xc9, 0x1c, 0xc0, 0x38, 0x4d, 0x3f,
	0xef, 0xdc, 0x35, 0xec, 0xdd, 0x37, 0x39, 0xe4, 0x22, 0x3e, 0x21, 0xcf, 0x21, 0x30, 0x8e, 0x30,
	0xf7, 0x36, 0x9b, 0x8c, 0xba, 0x93, 0xd1, 0xc1, 0xc5, 0x18, 0x9f, 0x90, 0x17, 0x70, 0x56, 0x5b,
	0x40, 0x33, 0xf4, 0xb4, 0xd1, 0x58, 0x5b, 0x63, 0xf2, 0xa9, 0x0b, 0x37, 0x6a, 0xe3, 0x13, 0xf2,
	0x23, 0x9c, 0xdf, 0x15, 0xc8, 0xcb, 0xd6, 0x88, 0x63, 0xb5, 0xf5, 0xed, 0xce, 0x26, 0xfa, 0xf6,
	0x91, 0x71, 0x56, 0x83, 0xf8, 0xe6, 0xe2, 0xc6, 0x73, 0x93, 0xa7, 0xc7, 0x48, 0x57, 0xdb, 0xff,
	0x0c, 0xe7, 0x0f, 0xcc, 0x48, 0x2e, 0x0f, 0x1e, 0xd0, 0xf2, 0x69, 0x3d, 0xab, 0xe5, 0xb6, 0xf8,
	0xe4, 0x25, 0xfc, 0xe2, 0xcf, 0x7e, 0x30, 0xb9, 0xa5, 0xf9, 0x1d, 0xf1, 0xec, 0xdf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xa5, 0xdf, 0x8e, 0xe3, 0x5f, 0x08, 0x00, 0x00,
}
